package core

import (
	"errors"
	"fmt"
	"log"
	"net/http"
	"os"
	"path"
	"strings"
	"syscall"
	"time"

	"github.com/go-playground/validator/v10"
	"github.com/jmoiron/sqlx"
	"github.com/knadh/goyesql/v2"
	"github.com/knadh/koanf/parsers/toml"
	"github.com/knadh/koanf/providers/file"
	"github.com/knadh/koanf/providers/posflag"
	"github.com/knadh/koanf/v2"
	"github.com/knadh/stuffbin"
	"github.com/labstack/echo/v4"
	_ "github.com/lib/pq"
	"github.com/nihalnclt/webyz/internal/models"
	flag "github.com/spf13/pflag"
)

type CustomValidator struct {
	validator *validator.Validate
}

func (cv *CustomValidator) Validate(i interface{}) error {
	if err := cv.validator.Struct(i); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err.Error())
	}
	return nil
}

func initFlags() {
	f := flag.NewFlagSet("config", flag.ContinueOnError)

	// Register the command line flags
	f.StringSlice("config", []string{"config.toml"},
		"path to one or more config files (will be merged in order)")
	if err := f.Parse(os.Args[1:]); err != nil {
		log.Fatalf("error loading flags: %v", err)
	}

	if err := ko.Load(posflag.Provider(f, ".", ko), nil); err != nil {
		log.Fatalf("error loading config: %v", err)
	}
}

// initHTTPServer initializes and runs the app's main HTTP server
func initHTTPServer(app *App) *echo.Echo {
	// Initialize the http server
	var srv = echo.New()
	srv.HideBanner = true

	// Register app (*App) to be injected into all HTTP handlers
	srv.Use(func(next echo.HandlerFunc) echo.HandlerFunc {
		return func(c echo.Context) error {
			c.Set("app", app)
			return next(c)
		}
	})

	// Assigning custom validator
	srv.Validator = &CustomValidator{validator: validator.New()}

	// Register all HTTP handlers
	initHTTPHandlers(srv, app)

	// Start the server
	go func() {
		if err := srv.Start(":8080"); err != nil {
			if errors.Is(err, http.ErrServerClosed) {
				log.Println("HTTP server shut down")
			} else {
				log.Fatalf("error starting HTTP server: %v", err)
			}
		}
	}()

	return srv
}

func awaitReload(sigChan chan os.Signal, closerWait chan bool, closer func()) chan bool {
	// The blocking signal handler that main() waits on.
	out := make(chan bool)

	// Respawn a new process and exit the running one.
	respawn := func() {
		if err := syscall.Exec(os.Args[0], os.Args, os.Environ()); err != nil {
			log.Fatalf("error spawning process: %v", err)
		}
		os.Exit(0)
	}

	// Listen for reload signal
	go func() {
		for range sigChan {
			log.Println("reloading on signal...")

			go closer()
			select {
			case <-closerWait:
				// Wait for the closer to finish
				respawn()
			case <-time.After(time.Second * 3):
				// Or timeout and force close
				respawn()
			}
		}
	}()

	return out
}

func initFS(appDir string) stuffbin.FileSystem {
	// stuffbin real_path:virtual_alias paths to map local assets on disk.
	// when there is an embeded filesystem not found.

	var appFiles = []string{
		"./config.toml.sample:config.toml.sample",
		"./internal/db/queries.sql:queries.sql",
		// "./schema.sql:schema.sql",
	}

	// Get the executable's execPath.
	execPath, err := os.Executable()
	if err != nil {
		log.Fatalf("error getting execuable path: %v", err)
	}

	// Load embeded files in executable.
	hasEmbed := true
	fs, err := stuffbin.UnStuff(execPath)
	if err != nil {
		hasEmbed = false

		// Running in local mode. Load local assets into
		// the in-memory stuffbin.Filesystem.
		log.Printf("unable to initialize embedded filesystem (%v). Using local filesystem", err)

		fs, err = stuffbin.NewLocalFS("/")
		if err != nil {
			log.Fatalf("failed to initialize local filesystem for assets: %v", err)
		}
	}

	// If the embed failed, load app and frontend files from the compile-time paths.
	files := []string{}
	if !hasEmbed {
		files = append(files, joinFSPaths(appDir, appFiles)...)
	}

	if len(files) == 0 {
		return fs
	}

	// Load files from disk and overlay into the FS
	fStatic, err := stuffbin.NewLocalFS("/", files...)
	if err != nil {
		log.Fatalf("failed reading static files from disk: %v", err)
	}

	if err := fs.Merge(fStatic); err != nil {
		log.Fatalf("error merging static files: %v", err)
	}

	return fs
}

func joinFSPaths(root string, paths []string) []string {
	out := make([]string, 0, len(paths))
	for _, p := range paths {
		f := strings.Split(p, ":")

		out = append(out, path.Join(root, f[0]+":"+f[1]))
	}

	return out
}

// initDB initializes the main DB connection pool and parse and loads app's
// SQL queries into a prepared query map.
func initDB() *sqlx.DB {
	var c struct {
		Host        string        `koanf:"host"`
		Port        int           `koanf:"port"`
		User        string        `koanf:"user"`
		Password    string        `koanf:"password"`
		DBName      string        `koanf:"dbname"`
		SSLMode     string        `koanf:"ssl_mode"`
		Params      string        `koanf:"params"`
		MaxOpen     int           `koanf:"max_open"`
		MaxIdle     int           `koanf:"max_idle"`
		MaxLifetime time.Duration `koanf:"max_lifetime"`
	}
	if err := ko.Unmarshal("db", &c); err != nil {
		log.Fatalf("error loading db config: %v", err)
	}

	log.Printf("connecting to db: %s:%d/%s", c.Host, c.Port, c.DBName)
	db, err := sqlx.Connect("postgres",
		fmt.Sprintf("host=%s port=%d user=%s password=%s dbname=%s sslmode=%s %s", c.Host, c.Port, c.User, c.Password, c.DBName, c.SSLMode, c.Params))
	if err != nil {
		log.Fatalf("error connecting to DB: %v", err)
	}

	db.SetMaxOpenConns(c.MaxOpen)
	db.SetMaxIdleConns(c.MaxIdle)
	db.SetConnMaxLifetime(c.MaxLifetime)

	return db
}

func initConfigFiles(files []string, ko *koanf.Koanf) {
	fmt.Println("Files:", files)
	for _, f := range files {
		log.Printf("reading config: %s", f)
		if err := ko.Load(file.Provider(f), toml.Parser()); err != nil {
			if os.IsNotExist(err) {
				log.Fatal("config file not found. If there isn't one yet, run --new-config to generate one.")
			}
			log.Fatalf("error loading config file: %v", err)
		}
	}
}

func readQueries(sqlFile string, fs stuffbin.FileSystem) goyesql.Queries {
	// Load SQL queries
	qB, err := fs.Read(sqlFile)
	if err != nil {
		log.Fatalf("error reading SQL file %s: %v", sqlFile, err)
	}
	qMap, err := goyesql.ParseBytes(qB)
	if err != nil {
		log.Fatalf("error parsing SQL queries: %v", err)
	}

	return qMap
}

func prepareQueries(qMap goyesql.Queries, db *sqlx.DB) *models.Queries {
	// Scan and prepare all queries
	var q models.Queries
	if err := goyesql.ScanToStruct(&q, qMap, db.DB); err != nil {
		log.Fatalf("error preparing SQL queries: %v", err)
	}

	return &q
}
